<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Rob Donnelly</title>
    <link>https://rfdonnelly.github.io/tags/software/</link>
    <description>Recent content in Software on Rob Donnelly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rfdonnelly.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tauri &#43; Async Rust Process</title>
      <link>https://rfdonnelly.github.io/posts/tauri-async-rust-process/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rfdonnelly.github.io/posts/tauri-async-rust-process/</guid>
      <description>Table of Contents1. Goal2. Create a Tauri App3. The Async Process4. Bidirectional Communication between Rust and JavaScript4.1. Commands vs Events4.2. Possible Simplification4.3. The JavaScript Side4.4. The Rust Side5. Bidirectional Communication between the Main Thread and the Async Process5.1. An Aside: Who Owns the Async Runtime?5.2. Creating the Channels5.3. Running the Async Process5.4. Main Thread to Async Process5.5. Async Process to Main Thread6. ResultThe complete source code for this post is available at https://github.</description>
    </item>
    
    <item>
      <title>Using Pageant with VS Code Remote Development</title>
      <link>https://rfdonnelly.github.io/posts/vscode-remote-with-pageant/</link>
      <pubDate>Tue, 01 Dec 2020 22:31:27 +0000</pubDate>
      
      <guid>https://rfdonnelly.github.io/posts/vscode-remote-with-pageant/</guid>
      <description>Table of Contents1. Assumptions2. Introduction3. Install wsl-ssh-pageant4. Setup wsl-ssh-pageant5. Use VS Code Remote DevelopmentThis article documents using Pageant to manage SSH keys for VS Code Remote.
1. AssumptionsVS Code and the VS Code Remote Development extension is installedPuTTY Pageant is being used to manage SSH keysThe remote host has a corresponding public key 2. IntroductionVS Code Remote Development doesn’t support Pageant out of the box.⁠[1] More specifically, VS Code Remote Development uses the Windows 10 native OpenSSH client and the OpenSSH client doesn’t support Pageant.</description>
    </item>
    
    <item>
      <title>Using WSL2</title>
      <link>https://rfdonnelly.github.io/posts/wsl2/</link>
      <pubDate>Mon, 03 Feb 2020 22:44:58 +0000</pubDate>
      
      <guid>https://rfdonnelly.github.io/posts/wsl2/</guid>
      <description>Table of Contents1. Install WSL22. Install Docker3. Install Windows Terminal4. Setup SSH X11 Forwarding5. Setup Pageant6. SSH into WSL2This article documents the setup of WSL2 for local and remote development. Local development is supported by Docker. For remote development, WSL2 effectively acts as a bridge. Remote development is done via SSH with support for X11 forwarding. This allows X11 applications to be run on the remote host and display on the Windows desktop.</description>
    </item>
    
    <item>
      <title>Using Tree-sitter Parsers in Rust</title>
      <link>https://rfdonnelly.github.io/posts/using-tree-sitter-parsers-in-rust/</link>
      <pubDate>Wed, 07 Aug 2019 11:20:33 -0700</pubDate>
      
      <guid>https://rfdonnelly.github.io/posts/using-tree-sitter-parsers-in-rust/</guid>
      <description>Update: 2022-12-26: Fixed unwrap() on Err by updating to latest tree-sitter Update: 2019-08-10: Fixed rerun directive in build.rs
Tree-sitter is a parser generator tool and parsing library. It generates portable parsers that can be used in several languages including Rust. Tree-sitter grammars are available for several languages.
This is a game changer because it lowers the barrier to entry for writing language tooling. You no longer need to write your own parser.</description>
    </item>
    
  </channel>
</rss>
